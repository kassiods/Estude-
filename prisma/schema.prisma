// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Removido pois DATABASE_URL já é uma conexão direta (porta 5432)
}

model User {
  id              String    @id // Este ID virá do Supabase Auth, por isso SEM @default(uuid())
  email           String    @unique
  name            String?
  isPremium       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  coursesAuthored Course[]  @relation("CourseAuthor")
  progress        UserProgress[]
  favorites       Favorite[]
  chatMessages    ChatMessage[]
  notifications   Notification[]
  conversationHistory ConversationHistory[]
  adminProfile    Admin?
}

model Admin {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSuperAdmin Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  level         Level     @default(BEGINNER)
  imageUrl      String?
  dataAiHint    String?   // Para ajudar a IA a encontrar imagens de placeholder relevantes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String?
  author        User?     @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  modules       Module[]
  userProgress  UserProgress[]
  favoritedBy   Favorite[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int       // Ordem do módulo dentro do curso
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    Content[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userProgress UserProgress[]
}

model Content {
  id          String      @id @default(cuid())
  title       String
  type        ContentType
  order       Int         // Ordem do conteúdo dentro do módulo
  url         String?     // Para vídeos, links externos
  textContent String?     @db.Text // Para artigos, descrições de quiz
  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userProgress UserProgress[]
}

model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId    String?   // Progresso pode ser em nível de módulo também
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentId   String?   // Progresso pode ser em nível de conteúdo específico
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  completedAt DateTime  @default(now())
  lastAccessedAt DateTime @updatedAt

  @@unique([userId, contentId], name: "UserContentProgressUnique") // Garante que um usuário não complete o mesmo conteúdo múltiplas vezes
  // Adicionar mais índices conforme necessário, ex: @@index([userId, courseId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String   // Ex: "general", "course- matematica-avancada"
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channel, createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String   @db.Text
  link      String?  // Link para a página relevante (ex: curso, módulo)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Para o Assistente de IA
model ConversationHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String   @db.Text
  response  String   @db.Text
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
  // Adicionar mais tipos conforme necessário: ARTICLE, PDF, EXERCISE, etc.
}
