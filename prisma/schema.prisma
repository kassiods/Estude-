// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations, optional if not using Prisma Migrate directly often
}

model User {
  id              String    @id // Should match Supabase Auth user ID, no @default(uuid())
  email           String    @unique
  name            String?
  isPremium       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  coursesAuthored Course[]  @relation("CourseAuthor")
  progress        UserProgress[]
  favorites       Favorite[]
  chatMessages    ChatMessage[]
  notifications   Notification[]
  conversationHistory ConversationHistory[]
  adminProfile    Admin?
}

model Admin {
  id           String   @id @default(cuid())
  userId       String   @unique // Foreign key to User model
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  level         Level     @default(BEGINNER)
  imageUrl      String?
  dataAiHint    String? // For Unsplash keyword search hint
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String?
  author        User?     @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  modules       Module[]
  userProgress  UserProgress[]
  favorites     Favorite[]
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  order       Int       // Order of the module within the course
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    Content[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userProgress UserProgress[]
}

model Content {
  id          String      @id @default(cuid())
  title       String
  type        ContentType
  order       Int         // Order of the content within the module
  url         String?     // For VIDEO, PDF links
  textContent String?     @db.Text // For TEXT, QUIZ (JSON), EXERCISE
  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userProgress UserProgress[]
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId    String   // Progress can be associated with a module overall
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentId   String?  // Optional: progress can be for specific content
  content     Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())
  lastAccessedAt DateTime @updatedAt

  @@unique([userId, contentId], name: "UserContentProgressUnique") // User can complete a content only once
  // You might want a similar unique constraint for module completion if contentId is null
  // @@unique([userId, moduleId], name: "UserModuleProgressUnique") // if applicable
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String   // e.g., "general", "course-xyz-discussion"
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String    @db.Text
  link      String?   // Link to relevant page, e.g., /courses/xyz
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model ConversationHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  VIDEO
  QUIZ
  EXERCISE // Example: For coding exercises or text-based problems
  PDF
  PODCAST  // Example: If you plan to add audio content
}
