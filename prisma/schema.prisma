// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations, optional if not using Prisma Migrate directly often
}

// ----------- AUTH & USER -----------
// Represents user profiles, linked to Supabase Auth users
model User {
  id                  String    @id // UUID from Supabase Auth, no @default(uuid()) here
  email               String    @unique
  name                String?
  isPremium           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  coursesAuthored     Course[]              @relation("CourseAuthor")
  progress            UserProgress[]
  favorites           Favorite[]
  chatMessages        ChatMessage[]
  notifications       Notification[]
  conversationHistory ConversationHistory[]
  adminProfile        Admin?
}

model Admin {
  id           String   @id @default(cuid())
  userId       String   @unique // Foreign key to User model
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSuperAdmin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ----------- CORE LEARNING PLATFORM -----------
model Course {
  id            String        @id @default(cuid())
  title         String
  description   String?
  level         Level         @default(BEGINNER)
  imageUrl      String?
  dataAiHint    String?       // For AI-powered image suggestions
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  authorId      String?       // Foreign key to User
  author        User?         @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  modules       Module[]
  userProgress  UserProgress[]
  favorites     Favorite[]
}

model Module {
  id           String    @id @default(cuid())
  title        String
  description  String?
  order        Int       // Order of the module within the course
  courseId     String
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  contents     Content[]
  userProgress UserProgress[]
}

model Content {
  id          String      @id @default(cuid())
  title       String
  type        ContentType
  order       Int         // Order of the content within the module
  url         String?     // For VIDEO type
  textContent String?     // For TEXT or QUIZ (JSON for questions)
  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userProgress UserProgress[]
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId    String?  // Optional for overall course progress, or link to module directly
  module      Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentId   String   // Progress is usually tied to specific content
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, contentId]) // A user completes a content item once
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

// ----------- COMMUNITY & INTERACTION -----------
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String   // e.g., "general", "course-guid"
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  link      String?   // Optional link for navigation
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
}

// ----------- AI & PERSONALIZATION -----------
model ConversationHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
}


// ----------- ENUMS -----------
enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  VIDEO
  QUIZ // Could store quiz questions/answers as JSON in textContent
  // ARTICLE // Could be another type if different from TEXT
  // FILE // For downloadable resources
}
