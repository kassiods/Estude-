
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Required for Prisma Migrate, uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

// Autenticação e Perfis de Usuário
// A tabela 'users' do Supabase Auth (em auth.users) é a fonte da verdade para autenticação.
// Esta tabela 'User' no schema public é para dados de perfil adicionais.
// O 'id' aqui DEVE ser o mesmo UUID do auth.users.id.
model User {
  id          String  @id @default(uuid()) // Deve corresponder ao auth.users.id
  email       String  @unique
  name        String?
  // password_hash String? // Supabase Auth lida com senhas; não armazene aqui.
  isPremium   Boolean @default(false) @map("is_premium")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  progress            UserProgress[]
  favorites           Favorite[]
  chatMessages        ChatMessage[]
  conversationHistory ConversationHistory[]
  notifications       Notification[]
  adminProfile        Admin?

  @@map("users") // Mapeia para a tabela 'users' no schema 'public'
}

// Cursos e Conteúdo Educacional
enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String?
  level       Level   @default(BEGINNER)
  imageUrl    String? @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  modules         Module[]
  userProgress    UserProgress[]
  favorites       Favorite[]

  @@map("courses")
}

model Module {
  id          String  @id @default(cuid())
  title       String
  description String?
  order       Int     // Ordem do módulo dentro do curso
  courseId    String  @map("course_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course          Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents        Content[]
  userProgresses  UserProgress[] // Back-relation for UserProgress

  @@map("modules")
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
  PDF // Adicionado conforme PRD implícito
  EXERCISE // Adicionado conforme PRD implícito
}

model Content {
  id          String      @id @default(cuid())
  moduleId    String      @map("module_id")
  title       String
  type        ContentType
  url         String?     // Para VIDEO, PDF
  textContent String?     @map("text_content") // Para TEXT, QUIZ, EXERCISE
  order       Int         // Ordem do conteúdo dentro do módulo
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  module       Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@map("contents")
}

// Progresso do Usuário
model UserProgress {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  courseId    String   @map("course_id")
  moduleId    String?  // Opcional se o progresso for apenas no curso geral ou conteúdo específico
  contentId   String   // Progresso é geralmente ligado a um conteúdo específico
  completedAt DateTime @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module  Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade) // Relação com Module
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId]) // Um usuário só pode completar um conteúdo uma vez
  @@map("user_progress")
}

// Favoritos
model Favorite {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("favorites")
}

// Chat Comunitário
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  channel   String   @default("general") // Canal ou tópico do chat
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Histórico de Conversas com IA
model ConversationHistory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  prompt    String   // O que o usuário perguntou
  response  String   // O que a IA respondeu
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversation_history")
}

// Notificações
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  message   String
  link      String?  // Link opcional para onde a notificação leva
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Admin
model Admin {
  id           String  @id @default(cuid()) // PK da tabela Admin
  userId       String  @unique @map("user_id") // FK para User.id
  isSuperAdmin Boolean @default(false) @map("is_super_admin")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}
