// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Comentado pois DATABASE_URL já é uma conexão direta (porta 5432)
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Adicionado para Prisma Migrate
}

// Autenticação e Usuários
model User {
  id            String    @id // UUID from Supabase Auth
  email         String    @unique
  name          String?
  isPremium     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Admin? // Relação 1:1 se o usuário for admin
  coursesAuthored Course[] @relation("CourseAuthor") // Cursos que o usuário criou
  progress      UserProgress[]
  favorites     Favorite[]
  chatMessages  ChatMessage[]
  notifications Notification[]
  conversations ConversationHistory[]

  @@map("users") // Mapeia para a tabela 'users' que criamos, não 'User' do Supabase Auth
}

model Admin {
  id           String  @id @default(cuid())
  userId       String  @unique // Chave estrangeira para User.id
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSuperAdmin Boolean @default(false)
}

// Conteúdo Educacional
model Course {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  level         Level     @default(BEGINNER)
  imageUrl      String?
  dataAiHint    String?   // Para dicas de IA ao gerar imagens
  authorId      String?   // ID do usuário que criou o curso
  author        User?     @relation("CourseAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  modules       Module[]
  userProgress  UserProgress[]
  favoritedBy   Favorite[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Module {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  order       Int       // Ordem do módulo dentro do curso
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    Content[]
  userProgress UserProgress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Content {
  id          String      @id @default(cuid())
  title       String
  type        ContentType
  order       Int         // Ordem do conteúdo dentro do módulo
  url         String?     // Para vídeos, links externos
  textContent String?     @db.Text // Para artigos, questões de quiz
  moduleId    String
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Progresso e Engajamento do Usuário
model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  moduleId    String?   // Opcional, se o progresso for a nível de módulo
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contentId   String?   // Opcional, se o progresso for a nível de conteúdo específico
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  completedAt DateTime?
  lastAccessedAt DateTime @default(now())

  @@unique([userId, contentId]) // Usuário só completa um conteúdo uma vez
  @@index([userId, courseId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

// Comunidade e Interação
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   String   // Ex: "geral", "curso-id-matematica"
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  link      String?  // Link para a página relevante
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// AI e Personalização
model ConversationHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
}

// Enums
enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  VIDEO
  TEXT
  QUIZ
  // Adicionar mais tipos conforme necessário: PODCAST, PDF, EXERCISE
}
